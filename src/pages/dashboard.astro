---
export const prerender = false;

import ghosts from '../content/ghosts/ghost-content.json';

import { sql } from '../neon';

import Main from '../layouts/main.astro';

import Aside from '../components/aside.astro';
import ProfileCard from '../components/profile-card.astro';
import LineChartYears from '../components/line-chart-years.astro';
import BarChartDays from '../components/bar-chart-days.astro';
import ListExternalPublishers from '../components/list-external-publishers.astro';
import ListPopular from '../components/list-popular.astro';
import ListPopularReferrers from '../components/list-top-referrers.astro';
import ListTopTenCities from '../components/list-top-ten-cities.astro';
import GlobeAllCities from '../components/globe-all-cities';
import LineChartVisits from '../components/line-chart-visits.astro';
import RadarChartReactions from '../components/radar-chart-reactions.astro';
import DonutChartTags from '../components/donut-chart-tags.astro';
import PoweredByNeon from '../components/powered-by-neon.astro';
import PoweredByMdx from '../components/powered-by-mdx.astro';
import HappyAllCities from '../components/happy-all-cities';
import GithubActivity from '../components/github-activity';

import groupByYear from '../utils/group-by-year';
import groupByDay from '../utils/group-by-day';
import groupByDate from '../utils/group-by-date';
import groupByCity from '../utils/group-by-city';
import groupByPublication from '../utils/group-by-publication';
import groupByTag from '../utils/group-by-tag';
import groupBySlug from '../utils/group-by-slug';
import groupByReaction from '../utils/group-by-reaction';
import groupByReferrer from '../utils/group-by-referrer';
import isNewContent from '../utils/is-new-content';

const content = await fetch(`${import.meta.env.SITE}/all-content.json`);

const { collections } = await content.json();

const mergedCollections = [...collections, ...ghosts];

let analyticsData = null;
let reactionsData = null;
const period = 30;

try {
  analyticsData = await sql(`
    SELECT * 
    FROM analytics
    WHERE date >= NOW() - INTERVAL '${period} days'
  `);

  reactionsData = await sql(`
    SELECT *
    FROM reactions
    WHERE date >= NOW() - INTERVAL '${period} days'
  `);

  if (!analyticsData.length || !reactionsData.length) {
    throw new Error('Bad request');
  }
} catch (error) {
  console.error(error);
}
---

<Main title='Dashboard' description='Statistics and analytics about my work' slug='/dashboard/'>
  <strong class='text-sm text-brand-primary'>Dashboard</strong>
  <h1 class='mb-0'>Built-in Analytics</h1>
  <p class='mb-16'>
    The data visualizations on this page have been created using data from local MDX files and a custom web analytics
    solution powered by Vercel Edge Functions and a Neon Serverless Postgres database. The recent GitHub activity list
    has been created by using the GitHub REST API.
  </p>
  <div class='flex flex-col gap-24 min-w-full'>
    {
      analyticsData && reactionsData ? (
        <>
          <section>
            <h2 class='m-0 uppercase'>Totals by Year and Month</h2>
            <p class='mt-0 mb-4 text-slate-300'>All content</p>
            <LineChartYears data={groupByYear(mergedCollections)} />
          </section>

          <section>
            <h2 class='m-0 uppercase'>Totals by Year and Day</h2>
            <p class='mt-0 mb-4 text-slate-300'>All content</p>
            <BarChartDays data={groupByDay(mergedCollections)} />
          </section>

          <div class='grid sm:gap-x-8 sm:grid-cols-2'>
            <section class='flex flex-col'>
              <h2 class='m-0 uppercase'>Totals by reaction</h2>
              <p class='mt-0 mb-4 text-slate-300'>Recent reactions</p>
              <RadarChartReactions data={groupByReaction(reactionsData)} />
            </section>
            <PoweredByNeon period={period} className='mb-24 sm:mb-0 sm:order-3' />
            <section>
              <h2 class='m-0 uppercase'>Totals by Tag</h2>
              <p class='mt-0 mb-4 text-slate-300'>Recent tags</p>
              <DonutChartTags
                data={groupByTag(mergedCollections.filter(({ data: { date } }) => isNewContent(date)))}
                dataLength={groupByTag(mergedCollections).length}
              />
            </section>
            <PoweredByMdx period={period} className='sm:order-4' />
          </div>

          <section>
            <h2 class='m-0 uppercase'>Totals by publisher</h2>
            <p class='mt-0 mb-4 text-slate-300'>All publishers</p>
            <ListExternalPublishers data={groupByPublication(mergedCollections)} />
          </section>

          <section>
            <h2 class='m-0 uppercase'>Totals by site visits</h2>
            <p class='mt-0 mb-4 text-slate-300'>Recent site visits</p>
            <LineChartVisits data={groupByDate(analyticsData)} />
            <PoweredByNeon period={period} />
          </section>

          <section>
            <h2 class='m-0 uppercase'>Totals by referrer</h2>
            <p class='mt-0 mb-4 text-slate-300'>Top Ten referrers</p>
            <ListPopularReferrers data={groupByReferrer(analyticsData)} />
            <PoweredByNeon period={period} />
          </section>

          <div class='flex flex-col md:flex-row gap-24 md:gap-8 overflow-hidden'>
            <section class='w-full lg:w-1/2'>
              <div class='flex flex-col'>
                <h2 class='m-0 uppercase'>Totals by city</h2>
                <p class='mt-0 mb-4 text-slate-300'>Recent city visits</p>
                <ListTopTenCities data={groupByCity(analyticsData)} />
              </div>
              <PoweredByNeon period={period} />
            </section>
            <section class='w-full lg:w-1/2'>
              <h2 class='m-0 uppercase'>Location visualization</h2>
              <p class='mt-0 mb-4 text-slate-300'>Recent geolocation visits</p>
              <div class='relative rounded border border-brand-outline bg-brand-surface/40 cursor-move'>
                <div class='flex justify-center overflow-hidden'>
                  <GlobeAllCities data={groupByCity(analyticsData)} />
                </div>
              </div>
              <PoweredByNeon period={period} />
            </section>
          </div>

          <section>
            <h2 class='m-0 uppercase'>Happiest Cities</h2>
            <p class='mt-0 mb-4 text-slate-300'>Top ten happiest cities</p>
            <HappyAllCities period={period} />
            <PoweredByNeon period={period} />
          </section>

          <section>
            <h2 class='m-0 uppercase'>Popular Posts</h2>
            <p class='mt-0 mb-4 text-slate-300'>Top Ten Post views</p>
            <ListPopular
              data={groupBySlug(analyticsData)
                .filter((item) => {
                  if (item.slug.includes('/posts/')) {
                    return item;
                  }
                })
                .sort((a, b) => b.total - a.total)
                .slice(0, 10)}
            />
            <PoweredByNeon period={period} />
          </section>

          <section>
            <h2 class='m-0 uppercase'>Popular Articles</h2>
            <p class='mt-0 mb-4 text-slate-300'>Top Ten Article views</p>
            <ListPopular
              data={groupBySlug(analyticsData)
                .filter((item) => {
                  if (item.slug.includes('/articles/')) {
                    return item;
                  }
                })
                .sort((a, b) => b.total - a.total)
                .slice(0, 10)}
            />
            <PoweredByNeon period={period} />
          </section>
        </>
      ) : null
    }

    <section>
      <h2 class='m-0 uppercase'>GtiHub Activity</h2>
      <p class='mt-0 mb-4 text-slate-300'>Recent GitHub events</p>
      <GithubActivity />
    </section>

    <Aside>
      <ProfileCard />
    </Aside>
  </div>
</Main>
