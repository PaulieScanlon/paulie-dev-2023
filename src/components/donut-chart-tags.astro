---
import colors from '../utils/colors';

const { data } = Astro.props;
const chartData = data.sort((a, b) => b.total - a.total).slice(0, 5);

const max = chartData.reduce((a, b) => a + b.total, 0);

const convertToPercent = (num) => Math.round((num / max) * 100);
const convertToDegrees = (num) => Math.round((num / 100) * 360);

const gradient = chartData
  .reduce((items, item, index, array) => {
    items.push(item);

    item.count = item.count || 0;
    item.count += array[index - 1]?.count || item.count;
    item.start_value = array[index - 1]?.count ? array[index - 1].count : 0;
    item.end_value = item.count += item.total;
    item.start_percent = convertToPercent(item.start_value);
    item.end_percent = convertToPercent(item.end_value);
    item.start_degrees = convertToDegrees(item.start_percent);
    item.end_degrees = convertToDegrees(item.end_percent);

    return items;
  }, [])
  .map((chart, index) => {
    const { start_degrees, end_degrees } = chart;
    return ` var(--color-brand-${colors[index]}) ${start_degrees}deg ${end_degrees}deg`;
  })
  .join();
---

<div class='relative border rounded border-brand-outline bg-brand-surface px-2 py-2'>
  <!-- <div class='absolute flex flex-col w-full h-1/2 top-[103px] -left-[1px] z-10'>
    <strong class='text-4xl text-center leading-6'>{`x${data.length}`}</strong>
    <small class='text-center'>Total tags</small>
  </div> -->
  <div class='w-[65%] mx-auto'>
    <svg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg' class='rounded-full'>
      <clipPath id='hole'>
        <path d='M 50 0 a 50 50 0 0 1 0 100 50 50 0 0 1 0 -100 v 18 a 2 2 0 0 0 0 64 2 2 0 0 0 0 -64'></path>
      </clipPath>
      <text text-anchor='middle' x='50' y='52' class='text-xl fill-brand-text font-bold'>{`x${data.length}`}</text>
      <text text-anchor='middle' x='50' y='58' class='text-[5px] fill-brand-text'>Tag types</text>
      <foreignObject x='0' y='0' width='100' height='100' clip-path='url(#hole)'>
        <div
          class='w-full h-full'
          style={{
            background: `conic-gradient(${gradient})`,
          }}
        >
        </div>
      </foreignObject>
    </svg>
  </div>
  <ul class='m-0'>
    {
      chartData.map((item, index) => {
        const { tag, total } = item;
        return (
          <li class='m-0 flex border-b border-b-transparent [&:not(:last-child)]:border-b-brand-outline p-0 leading-10'>
            <div class='flex grow items-center gap-3'>
              <div class={`w-3 h-3 rounded-full bg-brand-${colors[index]}`} />
              <span>{tag}</span>
            </div>
            <strong>{`x${total}`}</strong>
          </li>
        );
      })
    }
  </ul>
</div>
