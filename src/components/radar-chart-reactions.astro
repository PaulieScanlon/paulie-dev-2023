---
const { data, classNames = 'bg-brand-surface', showLegend = true } = Astro.props;

import colors from '../utils/colors';
import emojis from '../utils/emojis';

const chartSize = 300;
const chartCenter = chartSize / 2;

const chartData = data;
const max = chartData.reduce((max, current) => (current.total > max ? current.total : max), 0);
const pointPadding = 24;
const rings = [...Array(6).keys()];

const centerX = (angle, distance) => Math.cos(angle - Math.PI / 2) * distance;
const centerY = (angle, distance) => Math.sin(angle - Math.PI / 2) * distance;

const axis = chartData.map((_, index) => {
  const angle = (Math.PI * 2 * index) / chartData.length;
  const x = centerX(angle, chartSize / 2);
  const y = centerY(angle, chartSize / 2);
  const points = [
    [0, 0],
    [x, y],
  ]
    .map((point) => point[0].toFixed(4) + ',' + point[1].toFixed(4))
    .join(' ');
  return {
    points: points,
    angle: angle,
  };
});

const properties = chartData.map((item, index) => {
  const { reaction, total } = item;
  const clamp = Number(total / (max + pointPadding));
  const angle = (Math.PI * 2 * index) / chartData.length;
  const x = centerX(angle, (clamp * chartSize) / 2);
  const y = centerY(angle, (clamp * chartSize) / 2);
  return { reaction: reaction, total: total, x: x, y: y };
});

const shape =
  properties.reduce((items, item, index) => {
    const { x, y } = item;
    const string = `${index === 0 ? 'M' : 'L'}${x},${y}`;
    return items + string;
  }, '') + 'z';
---

<div class={`m-0 p-0 border rounded border-brand-outline ${classNames}`}>
  <div class='p-8'>
    <svg viewBox={`0 0 ${chartSize} ${chartSize}`} role='presentation'>
      <g transform={`translate(${chartCenter},${chartCenter})`}>
        {
          axis.map((guide) => {
            const { points } = guide;
            return <polyline points={points} class='stroke-brand-radar' fill='none' stroke-width={0.5} />;
          })
        }
        {
          rings.map((_, index) => {
            return (
              <circle
                cx={0}
                cy={0}
                r={((index / rings.length) * chartSize) / Number((Math.PI / 2 + 0.1).toFixed(2))}
                class='stroke-brand-radar'
                fill='none'
                stroke-width={0.5}
              />
            );
          })
        }
        <path d={shape} class='stroke-brand-text/50 fill-brand-text/20' stroke-width={1}></path>
        {
          properties.reverse().map((property, index) => {
            const { reaction, x, y } = property;

            const icon = emojis.find((emoji) => {
              return emoji.name === reaction;
            });

            const invertedIndex = Math.abs(index - properties.length) - 1;

            return (
              <g transform={`translate(${x - 12},${y - 12})`}>
                <circle cx={16} cy={16} r={14} class='fill-brand-background' />
                <path d={icon.d} class={`fill-brand-${colors[invertedIndex]}`} />
              </g>
            );
          })
        }
      </g>
    </svg>
  </div>
  {
    showLegend ? (
      <ul class='m-0 px-4'>
        {chartData.map((item, index) => {
          const { reaction, total } = item;

          const icon = emojis.find((emoji) => {
            return emoji.name === reaction;
          });

          return (
            <li class='m-0 p-0 flex items-center gap-4 border-b border-b-transparent [&:not(:last-child)]:border-b-brand-outline leading-[2.65rem]'>
              <div class='flex grow items-center gap-3'>
                <div class={`w-3 h-3 rounded-full bg-brand-${colors[index]}`} />
                <span class='capitalize'>{icon.name}</span>
              </div>
              <strong>{`x${total}`}</strong>
            </li>
          );
        })}
      </ul>
    ) : null
  }
</div>
