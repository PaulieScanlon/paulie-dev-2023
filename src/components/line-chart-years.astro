---
const { collections } = Astro.props;

const abbreviatedMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
const colors = ['teal', 'mauve', 'salmon', 'yellow', 'bogey', 'blood', 'electric', 'starfleet'];

const sourceData = collections.map((entry) => {
  const {
    data: { date },
  } = entry;

  return {
    month: abbreviatedMonths[new Date(date).getMonth()],
    year: new Date(date).getFullYear(),
  };
});

const groupedByYear = sourceData.reduce((acc, item) => {
  const year = item.year;
  const month = item.month;

  if (!acc[year]) {
    acc[year] = {};
  }

  if (!acc[year][month]) {
    acc[year][month] = [];
  }

  acc[year][month].push(item);

  return acc;
}, {});

const countsByYearAndMonth = Object.keys(groupedByYear).reduce((acc, year) => {
  const groupedByYearByYear = groupedByYear[year];

  Object.keys(groupedByYearByYear).forEach((month) => {
    const monthCount = groupedByYearByYear[month].length;

    if (!acc[year]) {
      acc[year] = {};
    }

    acc[year][month] = monthCount;
  });

  // Add months with 0 count
  abbreviatedMonths.forEach((month) => {
    if (!acc[year][month]) {
      acc[year][month] = 0;
    }
  });

  return acc;
}, {});

const chartData = Object.keys(countsByYearAndMonth).map((year) => {
  return Object.fromEntries(
    Object.entries(countsByYearAndMonth[year]).sort(
      ([monthA], [monthB]) => abbreviatedMonths.indexOf(monthA) - abbreviatedMonths.indexOf(monthB)
    )
  );
});

const chartWidth = 600;
const chartHeight = 300;
const offsetY = 40;
const paddingX = 50;
const paddingY = 50;
const years = [...new Set(sourceData.map((item) => item.year))].sort((a: number, b: number) => a - b);
// @ts-ignore
const maxY = Math.max(...chartData.map((monthData) => Math.max(...Object.values(monthData))));
const guides = [...Array(8).keys()];

const properties = chartData.map((property) => {
  return Object.entries(property).map((entry, index) => {
    const count = entry[1] as number;

    const x = (index / 12) * chartWidth + paddingX / 2;
    const y = chartHeight - offsetY - (count / maxY) * (chartHeight - (paddingY + offsetY)) - paddingY + offsetY;

    return {
      count: count,
      x: x,
      y: y,
    };
  });
});

const points = properties.map((point): any => {
  return point.map((p) => {
    const { x, y } = p;
    return `${x},${y}`;
  });
});

const ticks = abbreviatedMonths.map((abbr, index) => {
  const x = (index / abbreviatedMonths.length) * chartWidth + paddingX / 2;
  return {
    abbr: abbr,
    x: x,
  };
});
---

<script>
  const handleChart = (event) => {
    const {
      target,
      target: { id },
    } = event;

    const visuals = document.querySelectorAll(`.visuals-${id}`);

    visuals.forEach((visual: HTMLElement) => {
      const opacity = window.getComputedStyle(visual).opacity;
      if (opacity === '1') {
        visual.style.opacity = '0';
        target.style.opacity = '0.5';
      } else {
        visual.style.opacity = '1';
        target.style.opacity = '1';
      }
    });
  };

  const btns = document.querySelectorAll('.btn');
  btns.forEach((btn) => {
    btn.addEventListener('click', (event) => handleChart(event));
  });
</script>

<div class='border rounded border-brand-outline bg-brand-surface p-2 pb-4'>
  <svg viewBox={`0 0 ${chartWidth} ${chartHeight}`} role='presentation'>
    {
      guides.map((_, index) => {
        const ratio = index / guides.length;
        const y = chartHeight - offsetY - chartHeight * ratio;

        return (
          <polyline
            class='stroke-brand-guide'
            fill='none'
            stroke-width={0.6}
            points={`${paddingX / 2},${y} ${chartWidth - paddingX / 2},${y}`}
          />
        );
      })
    }
    {
      points.map((point, index) => {
        return (
          <polyline
            fill='none'
            class={`visuals-${years[index]} stroke-brand-${colors[index]}`}
            stroke-width={1}
            points={point}
          />
        );
      })
    }
    {
      properties.map((property, index) => {
        return property.map((p) => {
          const { count, x, y } = p;

          return (
            <g>
              <circle
                class={`visuals-${years[index]} stroke-brand-${colors[index]} fill-brand-surface`}
                cx={x}
                cy={y}
                r={3}
                stroke-width={1}
              />
              {count > 0 ? (
                <text
                  x={x}
                  y={y - 8}
                  text-anchor='middle'
                  font-size={10}
                  class={`visuals-${years[index]} fill-brand-text font-semibold select-none`}
                >
                  {`x${count}`}
                </text>
              ) : null}
            </g>
          );
        });
      })
    }
    {
      ticks.map((tick) => {
        const { abbr, x } = tick;

        return (
          <text
            x={x}
            y={chartHeight - (paddingY - offsetY)}
            text-anchor='middle'
            font-size={10}
            class='fill-brand-muted font-semibold uppercase select-none'
          >
            {abbr}
          </text>
        );
      })
    }
  </svg>
</div>
<ul class='flex gap-2 list-none m-0 px-0 py-4 text-sm'>
  {
    years.map((year: any, index: number) => {
      return (
        <li>
          <button
            id={year}
            class={`btn btn-${year} text-brand-${colors[index]} px-2 py-1 bg-brand-surface rounded border border-brand-outline transition-colors duration-300 hover:bg-brand-text/10`}
          >
            {year}
          </button>
        </li>
      );
    })
  }
</ul>
